AWSTemplateFormatVersion: '2010-09-09'  # Indica la versión del formato de la plantilla de CloudFormation.
Description: >  # Comienza una descripción de la plantilla.
  Plantilla de CloudFormation para desplegar una aplicación web con S3,  
  una VPC, EC2 con Apache, Auto Scaling Group, y un Balanceador de Carga (ELB).  # Detalla los recursos que se desplegarán.


Parameters:  # Sección para definir parámetros que pueden ser proporcionados en la creación de la pila.
  InstanceType:  # Parámetro para el tipo de instancia EC2.
    Type: String  # Especifica que el tipo es un string.
    Default: t2.micro  # Valor por defecto para el parámetro.
    Description: Tipo de instancia EC2 a utilizar  # Descripción del parámetro.
    AllowedValues:  # Valores permitidos para este parámetro.
      - t2.micro  # Tipo de instancia permitido.
      - t2.small  # Tipo de instancia permitido.
      - t3.micro  # Tipo de instancia permitido.
      - t3.small  # Tipo de instancia permitido.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre del par de claves SSH existente para conectarse a la instancia EC2
    ConstraintDescription: Clave RSA (SSH) válida para la instancia EC2de la WebApp para CloudFormation
    Default: webApp_keypair  # Aquí colocas el nombre exacto de la clave que creaste en AWS

Mappings:
  # Mapa de AMIs para cada región.
  RegionMap:
    us-east-1:
      AMI: ami-0fff1b9a61dec8a5f
    us-east-2:
      AMI: ami-09da212cf18033880

Resources:
  WebAppS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      WebsiteConfiguration: 
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  WebAppS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebAppS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 
              - 's3:PutObject'
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebAppS3Bucket}/*'

  WebAppVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WebAppVPC

  WebAppInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  WebAppVpcGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WebAppVPC
      InternetGatewayId: !Ref WebAppInternetGateway

  WebAppRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WebAppVPC
      Tags:
        - Key: Name
          Value: WebAppRouteTable

  WebAppRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WebAppRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WebAppInternetGateway

  WebAppSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: WebAppSubnet1

  WebAppSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WebAppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: WebAppSubnet2

  WebAppSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebAppSubnet1
      RouteTableId: !Ref WebAppRouteTable

  WebAppSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebAppSubnet2
      RouteTableId: !Ref WebAppRouteTable

  WebAppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Permitir acceso HTTP y SSH'
      VpcId: !Ref WebAppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0  # Cambia esto para restringir el acceso SSH
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - EC2fullAccesToS3

  WebAppInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName  # Asigna la clave SSH
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI] # Selección de AMI basada en la región.
      SubnetId: !Ref WebAppSubnet1
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile  # Asigna el perfil de instancia
      UserData:
        Fn::Base64: |
          #!/bin/bash
          exec > /var/log/user-data.log 2>&1
          echo "Iniciando UserData en la instancia"
          yum update -y
          yum install -y httpd aws-cli wget
          systemctl start httpd
          systemctl enable httpd

          # Definir el bucket de S3
          BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'webapp')].Name" --output text)
          echo "Bucket encontrado: $BUCKET_NAME"

          # Descargar archivos desde GitHub
          wget https://raw.githubusercontent.com/nicg2c2/labCloudFormation/develop/index.html -O /var/www/html/index.html
          wget https://raw.githubusercontent.com/nicg2c2/labCloudFormation/develop/error.html -O /var/www/html/error.html

          # Subir archivos a S3
          aws s3 cp /var/www/html/index.html s3://$BUCKET_NAME/index.html
          aws s3 cp /var/www/html/error.html s3://$BUCKET_NAME/error.html

          echo "Archivos descargados desde GitHub y subidos a S3"
      Tags:
        - Key: Name
          Value: WebAppInstance

  WebAppLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI] # Selección de AMI para Auto Scaling.
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          exec > /var/log/user-data.log 2>&1
          echo "Iniciando UserData en la instancia de Auto Scaling"
          yum update -y
          yum install -y httpd aws-cli wget
          systemctl start httpd
          systemctl enable httpd

          # Obtener el nombre del bucket
          BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'webapp')].Name" --output text)
          echo "Bucket encontrado: $BUCKET_NAME"

          # Descargar archivos desde GitHub (o desde S3 si ya existen)
          if aws s3 ls s3://$BUCKET_NAME/index.html; then
            echo "index.html ya existe en el bucket"
            aws s3 cp s3://$BUCKET_NAME/index.html /var/www/html/index.html
          else
            wget https://raw.githubusercontent.com/nicg2c2/labCloudFormation/develop/index.html -O /var/www/html/index.html
            aws s3 cp /var/www/html/index.html s3://$BUCKET_NAME/index.html
          fi

          if aws s3 ls s3://$BUCKET_NAME/error.html; then
            echo "error.html ya existe en el bucket"
            aws s3 cp s3://$BUCKET_NAME/error.html /var/www/html/error.html
          else
            wget https://raw.githubusercontent.com/nicg2c2/labCloudFormation/develop/error.html -O /var/www/html/error.html
            aws s3 cp /var/www/html/error.html s3://$BUCKET_NAME/error.html
          fi

          echo "Archivos listos en /var/www/html"

  WebAppAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref WebAppSubnet1
        - !Ref WebAppSubnet2
      LaunchConfigurationName: !Ref WebAppLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup  # Añadir el grupo de destino
      Tags:
        - Key: Name
          Value: WebAppASG
          PropagateAtLaunch: true  # Agregar esta línea

  WebAppLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref WebAppSubnet1
        - !Ref WebAppSubnet2
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  WebAppTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref WebAppVPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /
      TargetType: instance

  WebAppListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  S3BucketURL:
    Description: 'URL del bucket de S3 para almacenar archivos estáticos'
    Value: !GetAtt WebAppS3Bucket.WebsiteURL

  LoadBalancerURL:
    Description: 'URL del balanceador de carga'
    Value: !Sub 'http://${WebAppLoadBalancer.DNSName}'
